#!usr/bin/python

from argparse import ArgumentParser
import os
import mdtraj as md
from traj.load_features import traj_distances, traj_dihedrals, traj_dihedral_classes, load_feature_file
from tica.tica_optimize import in_equil, find_components, make_tica_opt
from output.plot_features import plot_slopes, plot_timescales, plot_density, manageable, plot_hmm, plot_estimate, plot_popl_1d, plot_estimate_1d, plot_BICs
from hmm.hmm_optimize import md_populations, make_hmm, hmm_arbitrary
from hmm.inheritance import combine_hmm_1d
from checkpoint.io_results import print_tica, print_tica_projs
import numpy as np


########################################################################
#																	   #
#					 		  Parse ARGV							   #
#																	   #
########################################################################


parser = ArgumentParser()

parser.add_argument("-i", "--input", nargs='*')
parser.add_argument("-p", "--topol")
parser.add_argument("-d", "--dimensions") # .. # Number of dimensions for each projection
parser.add_argument("-f", "--features") # .. # Feature file
parser.add_argument("-t", "--time") # .. # Time between frames in ps
parser.add_argument("-o", "--output")

args = vars(parser.parse_args())

trajins = args["input"]
topin = args["topol"]
dims = int(args["dimensions"])
f_file = args["features"]
timeskip = float(args["time"])
trajout = args["output"]

# .. # Make sure the files exist

for trajin in trajins:
#
	if not os.path.isfile(trajin):
	#
		raise Exception("Trajectory {:s} does not exist.".format(trajin))
	#
#

if not (topin is None):
#
	if not os.path.isfile(topin):
	#
		raise Exception("Topology {:s} does not exist.".format(topin))
	#
#

if not os.path.isfile(f_file):
#
	raise Exception("Feature file {:s} does not exist.".format(f_file))
#


########################################################################
#																	   #
#				  Load feature file and trajectory(ies)				   #
#																	   #
########################################################################


distances, dihedrals, dihedral_classes, exclude, keep, no_chain = load_feature_file(f_file)

max_len = 0

trajectories = []
trajectory_atoms = None

for trajin in trajins:
#
	features = None
	feature_atoms = None
	
	print("Loading trajectory {:s}...".format(trajin))
	
	traj1 = None
	
	if topin is None:
	#
		traj1 = md.load(trajin) # !! # The "topology" (the .gro file) must be included if the trajectory comes from GROMACS
	#
	else:
	#
		traj1 = md.load(trajin, top=topin) # !! # The "topology" (the .gro file) must be included if the trajectory comes from GROMACS
	#
	
	if not (keep is None):
	#
		traj1.atom_slice(traj1.top.select(keep), inplace=True)
	#
	
	if not (exclude is None):
	#
		traj1.atom_slice(traj1.top.select(exclude), inplace=True)
	#
	
	#print(instance.__class__.__name__) to print class name
	
	if not (distances is None):
	#
		calc_distances = traj_distances(traj1, distances, nochain=no_chain)
		
		if features is None:
		#
			features = calc_distances
			
			if trajectory_atoms is None:
			#
				feature_atoms = distances
			#
		#
		else:
		#
			features = np.append(features, calc_distances, axis=1)
			
			if trajectory_atoms is None:
			#
				feature_atoms = np.append(feature_atoms, distances)
			#
		#
	#
	
	if not (dihedrals is None):
	#
		calc_dihedrals = traj_dihedrals(traj1, dihedrals, nochain=no_chain)
		
		if features is None:
		#
			features = calc_dihedrals
			
			if trajectory_atoms is None:
			#
				feature_atoms = dihedrals
			#
		#
		else:
		#
			features = np.append(features, calc_dihedrals, axis=1)
			
			if trajectory_atoms is None:
			#
				feature_atoms = np.append(feature_atoms, dihedrals)
			#
		#
	#
	
	if not (dihedral_classes is None):
	#
		calc_dihedral_classes, dihedral_class_ids = traj_dihedral_classes(traj1, dihedral_classes)
		
		if features is None:
		#
			features = calc_dihedral_classes
			
			if trajectory_atoms is None:
			#
				feature_atoms = dihedral_class_ids
			#
		#
		else:
		#
			features = np.append(features, calc_dihedral_classes, axis=1)
			
			if trajectory_atoms is None:
			#
				feature_atoms = np.append(feature_atoms, dihedral_class_ids)
			#
		#
	#
	
	print("Done.")
	
	trajectories.append(features)
	
	if trajectory_atoms is None:
	#
		trajectory_atoms = feature_atoms
	#
#


########################################################################
#																	   #
#	 Perform a time-structure Independent Component Analysis (tICA)	   #
#	 			  Determine if equilibrium is reached				   #
#	 			 Determine optimal number of components				   #
#																	   #
########################################################################


print("Performing tICA...")

tica_tot, equil, equil_dists, n_comp, usable_comps, frameskip = make_tica_opt(trajectories, timeskip)

plot_timescales(tica_tot, usable_comps, "{:s}_timescales.pdf".format(trajout))
plot_slopes(tica_tot, usable_comps, "{:s}_slopes.pdf".format(trajout))

print_tica(tica_tot, equil, equil_dists, n_comp, usable_comps, frameskip, "{:s}_tica.dat".format(trajout))

ic_projs = tica_tot.transform(trajectories)

print_tica_projs(ic_projs, "{:s}_projs.dat".format(trajout))

#print("ic_projs :")
#print(len(ic_projs))
#print(np.shape(ic_projs[0]))

print("Splitting results into bundles of {:d} component(s)...".format(dims))

splits = np.arange(dims, n_comp + dims - 1, dims)

ic_splits = [None]*len(splits)

for i in range(len(ic_projs)):
#
	temp_split = np.split(ic_projs[i], splits, axis=1)
	
	del temp_split[-1]
	
	temp_array = np.array(temp_split)
	
	del temp_split
	
	#print(np.shape(temp_array))
	#print(np.shape(temp_array[0]))
	
	for j in range(len(temp_array)):
	#
		if ic_splits[j] is None:
		#
			print(j)
			
			ic_splits[j] = []
		#
		
		ic_splits[j].append(temp_array[j])
	#
	
	#print(len(ic_splits[0]))
#

#print(len(ic_splits))
#print(len(ic_splits[0]))
#print(np.shape(ic_splits[0][0]))

total_length = 0

for i in range(len(ic_splits[0])):
#
	total_length += len(ic_splits[0][0])
#

print("Perform clustering on component projections...")

all_hmms = []
#all_KLD_Hs = []
all_ranges = []

#arbitrary = [4, 1]

for i in range(len(ic_splits)):
#
	if dims == 2:
	#
		print("Plotting components...")
		plot_density(ic_splits[i], manageable(total_length), "{:s}_EVecs_{:d}_{:d}_density.pdf".format(trajout, 2*i+1, 2*i+2))
	#
	#elif dims == 1:
	#
		#print("Plotting components...")
		#plot_popl_1d(ic_splits[i], "{:s}_EVec_{:d}_popl.pdf".format(trajout, i+1), 100)
	#
	
	hmm_opti, ranges, populations, hmm_populations, BICs = make_hmm(ic_splits[i], 100, dims)
	#hmm_opti, ranges, populations, populations, BIC = hmm_arbitrary(ic_splits[i], 100, dims, arbitrary[i]) 
	
	state_centers, mean_approx = hmm_opti.draw_centroids(ic_splits[i])
	
	print("Split {:d} :".format(i+1))
	print("HMM {:d}...".format(len(hmm_opti.means_)))
	print("Means :")
	print(hmm_opti.means_)
	print("Vars :")
	print(hmm_opti.vars_)
	print("Timescales :")
	print(hmm_opti.timescales_)
	print("Populations :")
	print(hmm_opti.populations_)
	print("Transition matrix :")
	print(hmm_opti.transmat_)
	print("Centroids :")
	print(state_centers)
	print(mean_approx)
	
	plot_BICs(BICs, "{:s}_EVecs_{:d}_{:d}_BICs.pdf".format(trajout, 2*i+1, 2*i+2))
	
	if dims == 2:
	#
		plot_hmm(ic_splits[i], hmm_opti, manageable(total_length), "{:s}_EVecs_{:d}_{:d}_clusters.pdf".format(trajout, 2*i+1, 2*i+2))
		
		plot_estimate(hmm_opti.means_, hmm_opti.vars_, hmm_opti.populations_, ranges[0], ranges[1], "{:s}_EVecs_{:d}_{:d}_estimate.pdf".format(trajout, 2*i+1, 2*i+2))
	#
	#elif dims == 1:
	#
		#plot_estimate_1d(hmm_opti.means_, hmm_opti.vars_, hmm_opti.populations_, ranges[0], "{:s}_EVec_{:d}_estimate.pdf".format(trajout, i+1), 100)
	#
	
	all_hmms.append(hmm_opti)
	#all_KLD_Hs.append(KLD_H_opti)
	all_ranges.append(ranges)
#

#means_fusion, vars_fusion, popls_fusion = combine_hmm_1d(ic_splits, all_hmms)

#for i in range(len(means_fusion)):
#
	#if dims == 1:
	#
		#print("Fusion {:d} :".format(i+1))
		
		#print(means_fusion[i])
		#print(vars_fusion[i])
		#print(popls_fusion[i])
		#print(all_ranges[2*i][0])
		#print(all_ranges[2*i+1][0])
		
		#plot_estimate(means_fusion[i], vars_fusion[i], popls_fusion[i], all_ranges[2*i][0], all_ranges[2*i+1][0], "{:s}_EVecs_{:d}_{:d}_estimate_fusion.pdf".format(trajout, 2*i+1, 2*i+2))
	#
#
